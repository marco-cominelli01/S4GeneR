devtools::build_vignettes()
# To present getters/setters methods, a CodingGene object is used.
cg1 <- CodingGene()
devtools::load_all()
# To present getters/setters methods, a CodingGene object is used.
cg1 <- CodingGene()
# To present getters/setters methods, a CodingGene object is used.
cg1 <- CodingGene(gene_ensembl_id = 'ENSG12312344400', hugo_symbol = 'TP53',
gene_complete_name = 'Tumor Protein 53', gene_description =                     'Gene involved in cancer onset', chromosome = 'chr1', strand = '+', gene_start = 10, gene_end = 20, exons_starts = c(10,14), exons_ends = c(12, 20), gene_sequence = 'ATGCCCATAGC')
# To get the gene ENSEMBL ID.
gene_id(cg1)
# To get the gene Hugo symbol.
hugo_symbol(cg1)
# To get the gene complete name.
gene_complete_name(cg1)
# To get the gene description.
gene_description(cg1)
# To get the gene genomic coordinates.
gene_coordinates(cg1)
# To get the gene sequence.
gene_sequence(cg1)
# To get the exons genomic coordinates.
exons_coordinates(cg1)
# To get the gene's alternative transcripts (since it's not possible to add alternative transcripts at construction time, this will just return a placeholder transcript).
alternative_transcripts(cg1)
alternative_transcripts(cg1)
# To get the gene's alternative transcripts (since it's not possible to add alternative transcripts at construction time, this will just return a placeholder transcript).
alternative_transcripts(cg1)
# To get the gene's alternative transcripts (since it's not possible to add alternative transcripts at construction time, this will just return a placeholder transcript).
alternative_transcripts(cg1)
# To get the gene's alternative transcripts (since it's not possible to add alternative transcripts at construction time, this will just return a placeholder transcript).
alternative_transcripts(cg1)
# To get the gene ENSEMBL ID.
gene_id(cg1)
# To get the gene Hugo symbol.
hugo_symbol(cg1)
# To get the gene complete name.
gene_complete_name(cg1)
# To get the gene description.
gene_description(cg1)
# To get the gene genomic coordinates.
gene_coordinates(cg1)
# To get the gene sequence.
gene_sequence(cg1)
# To get the exons genomic coordinates.
exons_coordinates(cg1)
# To get the gene's alternative transcripts (since it's not possible to add alternative transcripts at construction time, this will just return a placeholder transcript).
alternative_transcripts(cg1)
# To get the gene ENSEMBL ID.
gene_id(cg1)
# To get the gene Hugo symbol.
hugo_symbol(cg1)
# To get the gene complete name.
gene_complete_name(cg1)
# To get the gene description.
gene_description(cg1)
# To get the gene genomic coordinates.
gene_coordinates(cg1)
# To get the gene sequence.
gene_sequence(cg1)
# To get the exons genomic coordinates.
exons_coordinates(cg1)
# To get the gene's alternative transcripts (since it's not possible to add alternative transcripts at construction time, this will just return a placeholder transcript).
alternative_transcripts(cg1)
##
# To set the gene genomic coordinates.
gene_coordinates(cg1) <- list(chromosome = 'chr2', strand = '+',
start = 1, end = 12)
# Since it's a virtual class, it's not possible to instantiate objects directly # from it.
# To present setters/getters methods, a CodingGene object is used.
cg1 <- CodingGene()
# To set the gene ENSEMBL ID.
gene_id(cg1) <- 'ENSG00000000011'
# To get the gene ENSEMBL ID.
gene_id(cg1)
# To set the gene Hugo symbol.
hugo_symbol(cg1) <- 'TP53'
# To get the gene Hugo symbol.
hugo_symbol(cg1)
# To set the gene complete name.
gene_complete_name(cg1) <- 'Tumor Protein 53'
# To get the gene complete name.
gene_complete_name(cg1)
# To set the gene description.
gene_description(cg1) <- 'Gene involved in cancer onset'
# To get the gene description.
gene_description(cg1)
# To set the gene genomic coordinates.
gene_coordinates(cg1) <- list(chromosome = 'chr1', strand = '+', start = 10,
end = 20)
# To get the gene genomic coordinates.
gene_coordinates(cg1)
# To set the gene sequence.
gene_sequence(cg1) <- 'ATCATCATCGG'
# To get the gene sequence.
gene_sequence(cg1)
# To set the exons genomic coordinates.
exons_coordinates(cg1) <- list(chromosome = 'chr1', strand = '+',
starts = c(10,14), ends = c(12, 20))
# To get the exons genomic coordinates.
exons_coordinates(cg1)
# To add alternative transcript
alternative_transcripts(cg1, action = 'add') <- list(
transcript_id = 'ENST12300000099', protein_coding = TRUE)
# To remove alternative transcript
alternative_transcripts(cg1, action = 'remove') <- list(
transcript_id = 'ENST12300000099', protein_coding = TRUE)
# To get alternative transcripts
alternative_transcripts(cg1)
# To set the gene ENSEMBL ID.
gene_id(cg1) <- 'ENSG00000000011'
# To get the gene ENSEMBL ID.
gene_id(cg1)
# To set the gene Hugo symbol.
hugo_symbol(cg1) <- 'TP53'
# To get the gene Hugo symbol.
hugo_symbol(cg1)
# To set the gene complete name.
gene_complete_name(cg1) <- 'Tumor Protein 53'
# To get the gene complete name.
gene_complete_name(cg1)
# To set the gene description.
gene_description(cg1) <- 'Gene involved in cancer onset'
# To get the gene description.
gene_description(cg1)
# To set the gene genomic coordinates.
gene_coordinates(cg1) <- list(chromosome = 'chr1', strand = '+', start = 10,
end = 20)
# To get the gene genomic coordinates.
gene_coordinates(cg1)
# To set the gene sequence.
gene_sequence(cg1) <- 'ATCATCATCGG'
# To get the gene sequence.
gene_sequence(cg1)
# To set the exons genomic coordinates.
exons_coordinates(cg1) <- list(chromosome = 'chr1', strand = '+',
starts = c(10,14), ends = c(12, 20))
# To get the exons genomic coordinates.
exons_coordinates(cg1)
# To add alternative transcripts.
alternative_transcripts(cg1, action = 'add') <- list(
transcript_id = 'ENST12300000099', protein_coding = TRUE)
alternative_transcripts(cg1, action = 'add') <- list(
transcript_id = 'ENST12300000000', protein_coding = TRUE)
# To remove alternative transcript.
alternative_transcripts(cg1, action = 'remove') <- list(
transcript_id = 'ENST12300000099', protein_coding = TRUE)
# To get alternative transcripts.
alternative_transcripts(cg1)
cg1 <- CodingGene()
# To set the mRNA ENSEMBL ID.
mRNA_id(cg1) <- 'ENST00000000011'
# To get the mRNA ENSEMBL ID.
mRNA_id(cg1)
# To set the mRNA genomic coordinates.
mRNA_coordinates(cg1) <- list(chromosome = 'chr1', strand = '+',
start = 40, end = 60)
# To get the mRNA genomic coordinates.
mRNA_coordinates(cg1)
# To set the CDS genomic coordinates.
cds_coordinates(cg1) <- list(chromosome = 'chr1', strand = '+',
start = 42, end = 58)
# To get the CDS genomic coordinates.
cds_coordinates(cg1)
# To set the protein ENSEMBL ID.
protein_id(cg1) <- 'ENSP00000000011'
# To get the protein ENSEMBL ID.
protein_id(cg1)
# To set the protein sequence.
protein_sequence(cg1) <- 'KRT'
# To get the protein sequence.
protein_sequence(cg1)
# To set the protein description.
protein_description(cg1) <- 'Transcription factor'
# To get the protein description.
protein_description(cg1)
# Since it's a virtual class, it's not possible to instantiate objects directly # from it.
# To present setters/getters methods, a tRNAGene object is used.
t1 <- tRNAGene()
# To set the pre-ncRNA ENSEMBL ID.
pre_ncRNA_id(t1) <- 'ENST00000000011'
# To get the pre-ncRNA ENSEMBL ID.
pre_ncRNA_id(t1)
# To set the pre-ncRNA genomic coordinates.
pre_ncRNA_coordinates(t1) <- list(chromosome = 'chr1', strand = '+',
start = 10,
end = 20)
# To get the pre-ncRNA genomic coordinates.
pre_ncRNA_coordinates(t1)
# Since it's a virtual class, it's not possible to instantiate objects directly # from it.
# To present setters/getters methods, a tRNAGene object is used.
t2 <- tRNAGene()
# To set the essentiality score.
essentiality_score(t1) <- 3
# To get the essentiality score.
essentiality_score(t2)
# To set the ubiquitous expression.
ubiquitous_expression(t2) <- TRUE
# To get the ubiquitous expression.
ubiquitous_expression(t2)
# To set the essentiality score.
essentiality_score(t2) <- 3
# To get the essentiality score.
essentiality_score(t2)
# To set the ubiquitous expression.
ubiquitous_expression(t2) <- TRUE
# To get the ubiquitous expression.
ubiquitous_expression(t2)
t3 <- tRNAGene()
# To set the mature tRNA sequence.
mature_sequence(t3) <- 'AUAGA'
# To get the mature tRNA sequence.
mature_sequence(t3)
# To set the tRNA anticodon.
anticodon(t3) <- 'UUU'
# To set the mature tRNA sequence.
mature_sequence(t3) <- 'AUUUAGA'
# To get the mature tRNA sequence.
mature_sequence(t3)
# To set the tRNA anticodon.
anticodon(t3) <- 'UUU'
# To get the tRNA anticodon.
anticodon(t3)
# To set the tRNA aminoacid.
amino_acid(t3) <- 'K'
# To get the tRNA aminoacid.
amino_acid(t3)
r1 <- rRNAGene()
# To set the mature rRNA sequence.
mature_sequence(r1) <- 'AUUUAGA'
# To get the mature rRNA sequence.
mature_sequence(r1)
# To set the rRNA type.
rRNA_type(r1) <- '18S'
# To get the rRNA type.
rRNA_type(r1)
devtools::build_vignettes()
devtools::load_all()
# Since it's a virtual class, it's not possible to instantiate objects directly # from it.
# To present setters/getters methods, a miRNAGene object is used.
mir1 <- miRNAGene()
# To add regulatory functions.
regulatory_functions(mir1, action = 'add') <- 'Chromatin remodeling'
regulatory_functions(mir1, action = 'add') <- 'Transcription regulation'
# To remove regulatory functions.
regulatory_functions(mir, action = 'remove') <- 'Chromatin remodeling'
# To add regulatory functions.
regulatory_functions(mir1, action = 'add') <- 'Chromatin remodeling'
regulatory_functions(mir1, action = 'add') <- 'Transcription regulation'
# To remove regulatory functions.
regulatory_functions(mir1, action = 'remove') <- 'Chromatin remodeling'
# To get regulatory functions.
regulatory_functions(mir1)
# To add targets.
targets_id(mir1, action = 'add') <- 'ENST12300000000'
targets_id(mir1, action = 'add') <- 'ENST12300000088'
# To remove targets.
targets_id(mir1, action = 'remove') <- 'ENST12300000000'
# To get targets.
targets_id(mir1)
# To set the mature miRNA sequence.
mature_sequence(mir2) <- 'AUUUAGA'
mir2 <- miRNAGene()
# To set the mature miRNA sequence.
mature_sequence(mir2) <- 'AUUUAGA'
# To get the mature miRNA sequence.
mature_sequence(mir2)
# To set the miRNA seed sequence.
seed_sequence(mir2) <- 'AGA'
# To get the miRNA sequence.
seed_sequence(mir2)
s1 <- siRNAGene(siRNA_off_targets = 'a')
s1 <- siRNAGene(siRNA_off_targets = list('a'))
sir1 <- siRNAGene()
# To set the mature siRNA sequence.
mature_sequence(sir1) <- 'AUUUAGA'
# To get the mature siRNA sequence.
mature_sequence(sir1)
# To add off-targets.
off_targets(sir1, action = 'add') <- 'TP53'
off_targets(sir1, action = 'add') <- 'ENSG12300000088'
# To remove targets.
off_targets(sir1, action = 'remove') <- 'ENSG12300000088'
# To get targets.
off_targets(sir1)
# To set the mature piRNA sequence.
mature_sequence(pir1) <- 'AUUUAGA'
pir1 <- piRNAGene()
# To set the mature piRNA sequence.
mature_sequence(pir1) <- 'AUUUAGA'
# To get the mature piRNA sequence.
mature_sequence(pir1)
# To add associated PIWI proteins.
associated_PIWI_proteins(pir1, action = 'add') <- 'PIWIL1'
associated_PIWI_proteins(pir1, action = 'add') <- 'PIWIL2'
# To remove associated PIWI proteins.
associated_PIWI_proteins(pir1, action = 'remove') <- 'PIWIL1'
# To get associated PIWI proteins.
associated_PIWI_proteins(pir1)
sn1 <- snRNAGene()
# To set the mature snRNA sequence.
mature_sequence(sn1) <- 'AUUUAGA'
# To get the mature snRNA sequence.
mature_sequence(sn1)
# To set the snRNA spliceosome complex.
spliceosome_complex(sn1) <- 'U4'
# To get the snRNA spliceosome complex.
spliceosome_complex(sn1)
sno1 <- snoRNAGene()
# To set the mature snoRNA sequence.
mature_sequence(sno1) <- 'AUUUAGA'
# To get the mature snoRNA sequence.
mature_sequence(sno1)
# To set the snoRNA box type.
box_type(sno1) <- 'C/D'
# To get the snoRNA box type.
box_type(sno1)
lnc1 <- LongNonCodingGene()
# To set the mature lncRNA sequence.
mature_sequence(lnc1) <- paste(rep('AUUUAGA',30), collapse = "")
# To get the mature lncRNA sequence.
mature_sequence(lnc1)
# To set the lncRNA genomic location class.
location_class(lnc1) <- 'intergenic'
# To get the lncRNA genomic location class.
location_class(lnc1)
# To set the lncRNA functional class.
functional_class(lnc1) <- 'decoy'
# To get the lncRNA functional class.
functional_class(lnc1)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
# Example on a protein-coding gene
cg <- CodingGene(protein_sequence = 'KRTKF')
lengthProduct(cg)
# Example on a non-coding gene
mir <- miRNAGene(miRNA_mature_sequence = 'UAUAUAGG')
lengthProduct(mir)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::load_all()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(devtools)
library(devtools)
devtools::build_vignettes()
